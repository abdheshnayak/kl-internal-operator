{{- $ownerRefs := get . "owner-refs"}}
{{- $regionOwnerRefs := get . "region-owner-refs"}}
{{- $obj := get . "obj"}}
{{- $region := get . "region"}}
{{- $corednsConfigExists := get . "coredns-config-exists"}}
{{- $deviceProxyConfigExists  := get . "device-proxy-config-exists"}}

{{- with $obj }}
apiVersion: v1
kind: Namespace
metadata:
  # annotations:
  #   linkerd.io/inject: enabled
  name: "wg-{{.Name}}"
  labels:
    name: "wg-{{.Name}}"
    kloudlite.io/account-ref: "{{.Name}}"
  ownerReferences:
    - {{ $ownerRefs | toJson }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "wireguard-deployment-{{$region}}"
  labels:
    wireguard-deployment: "true"
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - {{ $ownerRefs | toJson }}
    - {{ $regionOwnerRefs | toJson }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: "wireguard-{{$region}}"
  template:
    metadata:
      # annotations:
      #   linkerd.io/inject: disabled
      labels:
        app: "wireguard-{{$region}}"
        region: {{$region}}
        kloudlite.io/wg-pod: "true"
    spec:
      nodeSelector:
        kloudlite.io/region: {{$region}}
      containers:
      - name: proxy
        imagePullPolicy: Always
        image: harbor.dev.madhouselabs.io/public/kloudlite/proxy:v2
        env:
          - name: CONFIG_FILE
            value: /proxy-config/config.json

        volumeMounts:
          - mountPath: /proxy-config
            name: config-path

      - name: wireguard
        image: ghcr.io/linuxserver/wireguard
        command:
          - sh
          - -c
          - |-
            wg-quick up wg0 

            while [ true ];
            do
              x=$(wg | wc -l)
              [ $x -eq 0 ] && exit 1
              sleep 1;
            done
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
          privileged: true
        volumeMounts:
          - name: wg-config
            mountPath: /etc/wireguard
          - name: host-volumes
            mountPath: /lib/modules
        ports:
        - containerPort: 51820
          protocol: UDP
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
        - name: wg-config
          secret:
            secretName: wg-server-config
            items:
              - key: data
                path: wg0.conf
        - name: host-volumes
          hostPath:
            path: /lib/modules
            type: Directory

        - name: config-path
          configMap:
            name: "device-proxy-config"
            items:
              - key: config.json
                path: config.json




---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: wireguard
    wireguard-service: "true"
    region: {{$region}}
  name: "wireguard-service-{{$region}}"
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - {{ $ownerRefs | toJson }}
    - {{ $regionOwnerRefs | toJson }}
spec:
  type: NodePort
  ports:
    - port: 51820
      protocol: UDP
      targetPort: 51820
  selector:
    app: "wireguard-{{$region}}"


---

kind: Service
apiVersion: v1
metadata:
  labels:
    proxy-api: "true"
    region: {{$region}}
  name: "proxy-service-{{$region}}"
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - {{ $ownerRefs | toJson }}
    - {{ $regionOwnerRefs | toJson }}
spec:
  ports:
    - port: 80
      targetPort: 2999
  selector:
    app: "wireguard-{{$region}}"


{{- if not $deviceProxyConfigExists }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "device-proxy-config"
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - {{ $ownerRefs | toJson }}
    - {{ $regionOwnerRefs | toJson }}
data:
  config.json: |
    {"services":[]}
{{- end}}


{{- if not $corednsConfigExists }}
---
apiVersion: v1
data:
  devices: "[]"
  Corefile: |
    .:53 {
        errors
        health
        ready

        forward . 10.43.0.10
        cache 30
        loop
        reload
        loadbalance
    }
    import /etc/coredns/custom/*.server
kind: ConfigMap
metadata:
  ownerReferences:
    - apiVersion: {{.APIVersion}}
      kind: {{.Kind}}
      name: {{.Name}}
      uid: {{.UID}}
      controller: false
      blockOwnerDeletion: true
  name: coredns
  namespace: "wg-{{.Name}}"
{{- end}}

---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - apiVersion: {{.APIVersion}}
      kind: {{.Kind}}
      name: {{.Name}}
      uid: {{.UID}}
      controller: false
      blockOwnerDeletion: true
spec:
  selector:
    app: dns
  ports:
    - name: dns
      protocol: UDP
      port: 53
    - name: dns-tcp
      protocol: TCP
      port: 53

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: "wg-{{.Name}}"
  ownerReferences:
    - apiVersion: {{.APIVersion}}
      kind: {{.Kind}}
      name: {{.Name}}
      uid: {{.UID}}
      controller: false
      blockOwnerDeletion: true
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dns
  template:
    metadata:
      labels:
        app: dns
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: rancher/mirrored-coredns-coredns:1.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
          readOnly: true
        - mountPath: /etc/coredns/custom
          name: custom-config-volume
          readOnly: true
      dnsPolicy: Default
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: Corefile
            path: Corefile
          name: coredns
        name: config-volume
      - configMap:
          defaultMode: 420
          name: coredns-custom
          optional: true
        name: custom-config-volume

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wg-network-policy
  namespace: "wg-{{.Name}}"
spec:
  podSelector:
    matchLabels:
      kloudlite.io/wg-pod: "true"
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - ipBlock:
            cidr: 10.0.0.0/8
      ports:
        - protocol: UDP
          port: 51820
        - protocol: TCP
          port: 51820
    - from:
        - namespaceSelector:
            matchExpressions:
              - key: kloudlite.io/account-ref
                operator: In
                values:
                  - {{.Name}}
                  - kl-master
  egress:
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8

{{- end}}
